---
# Usage ansible-playbook -i hosts deploy_vmware_guests.yml --forks=1 --ask-vault-pass... to correct dhcpd.conf update
- name: create the VM
  tags: deployvm, dnsupdate
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    #cluster: '{{ cluster }}'               # uncomment if you have a cluster
    esxi_hostname: '{{ cluster }}'          # comment if you have a cluster
    #datacenter: '{{ vsphere_datacenter }}' # uncomment if you have datacenter
    folder: '{{  vsphere_folder  }}'
    name: '{{ inventory_hostname }}'
    state: poweredon
    guest_id: '{{ guest_id }}'
    annotation: "{{ notes }}"
    disk:
    - size_gb: "{{ disk_size }}"
      type: thin
      datastore: '{{ datastore }}'
    networks:
    - name: '{{ guest_network }}'
    hardware:
      memory_mb: '{{ memory }}'
      num_cpus: '{{ vcpu }}'
      boot_firmware: bios
      version: 14
    wait_for_ip_address: no
  delegate_to: localhost
  ignore_errors: yes

- name: poweroff VP
  tags: deployvm
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    #cluster: '{{ cluster }}'               # uncomment if you have a cluster
    esxi_hostname: '{{ cluster }}'          # comment if you have a cluster
    #datacenter: '{{ vsphere_datacenter }}' # uncomment if you have datacenter
    folder: '{{  vsphere_folder  }}'
    name: '{{ inventory_hostname }}'
    state: poweredoff
    #guest_id: '{{ guest_id }}'

  delegate_to: localhost
  ignore_errors: no
  register: deploy

- name: Gather facts about deployed VMs
  tags: deployvm, dhcpupdate, configupdate, dnsupdate
  vmware_guest_facts:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    datacenter: '{{ cluster }}'
    validate_certs: no
    name: '{{ inventory_hostname }}'
  delegate_to: localhost
  register: vminfo
  ignore_errors: yes

- name: stdout
  tags: deployvm, dhcpupdate, configupdate, dnsupdate
  debug: var=vminfo
  with_items: vminfo

- name: Update dhcp config
  tags: deployvm, dhcpupdate, configupdate
  vars:
    host:
      name: '{{ vminfo.instance.hw_name }}'
      mac: '{{ vminfo.instance.hw_eth0.macaddress }}'
      ip: '{% if not vminfo.instance.hw_eth0.ipaddresses %}{{ vminfo.instance.ipv4 }}{% else %}{{ vminfo.instance.hw_eth0.ipaddresses[0] }}{% endif %}'
  blockinfile:
    state: present
    path: |-
            {{ dhcp_conf_folder }}{% if not host.ip %}{{ host_ip.split('.')[0:3]| join('.') }}{%  else %}
            {{ host.ip.split('.')[0:3]| join('.') }}{% endif %}.255.conf
    backup: no
    marker: "# {mark} {{ host.name}} {{ notes }}"
    marker_end: "#END"
    block: |
     host {{ host.name }} {
       hardware ethernet {{ host.mac }};
       fixed-address {% if not host.ip %} {{ host_ip }} {%  else %} {{ host.ip }}{% endif %};}
    validate: dhcpd -t -cf %s
    insertafter: EOF
  delegate_to: "{{ dhcp_host }}"

- name: Update master dns config
  tags: deployvm, configupdate, dnsupdate
  vars:
    host:
      name: '{{ vminfo.instance.hw_name }}'
      mac: '{{ vminfo.instance.hw_eth0.macaddress }}'
      ip: '{% if not vminfo.instance.hw_eth0.ipaddresses %}{{ vminfo.instance.ipv4 }}{% else %}{{ vminfo.instance.hw_eth0.ipaddresses[0] }}{% endif %}'
  lineinfile:
    state: present
    insertafter: EOF
    dest: '{{ primary_dns_file }}' #your dns filename
    line: "{{ inventory_hostname.split('.')[0]}}\t\t\tIN\tA\t{% if not host.ip %}{{ host_ip }}{%  else %}{{ host.ip }}{% endif %}"
    backup: no
  delegate_to: "{{ dns_host }}"

- name: Update reverse DNS
  tags: deployvm, configupdate, dnsupdate
  vars:
    host:
      name: '{{ vminfo.instance.hw_name }}'
      mac: '{{ vminfo.instance.hw_eth0.macaddress }}'
      ip: '{% if not vminfo.instance.hw_eth0.ipaddresses %}{{ vminfo.instance.ipv4 }}{% else %}{{ vminfo.instance.hw_eth0.ipaddresses[0] }}{% endif %}'
  lineinfile:
    state: present
    insertafter: EOF
    dest: '{{ reverse_dns_file }}'  #your dns filename
    line: "{% if not host.ip %}{{ host_ip.split('.')[-1]}}{%  else %}{{ host.ip.split('.')[-1] }}{% endif %}\t\tIN\tPTR\t{{  inventory_hostname  }}."
    backup: no
  delegate_to: "{{ dns_host }}"

- name: restart dhcpd
  service: name=dhcpd state=restarted
  tags: deployvm, dhcpupdate, configupdate
  run_once: true
  delegate_to: "{{ dhcp_host }}"

- name: restart named
  service: name=named state=restarted
  tags: deployvm, configupdate, dnsupdate
  run_once: true
  delegate_to: "{{ dns_host }}"

- name: poweron VM
  tags: deployvm
  vmware_guest:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: no
    #cluster: '{{ cluster }}'               # uncomment if you have a cluster
    esxi_hostname: '{{ cluster }}'          # comment if you have a cluster
    #datacenter: '{{ vsphere_datacenter }}' # uncomment if you have datacenter
    folder: '{{  vsphere_folder  }}'
    name: '{{ inventory_hostname }}'
    state: poweredon
    #guest_id: '{{ guest_id }}'

  delegate_to: localhost
  ignore_errors: yes


